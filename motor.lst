C51 COMPILER V9.00   MOTOR                                                                 05/25/2015 23:46:13 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN motor.obj
COMPILER INVOKED BY: g:\Keil\C51\BIN\C51.EXE Source\motor.c INCDIR(..\µç»ú¿ØÖÆ) PRINT(.\motor.lst) OBJECT(motor.obj)

line level    source

   1          /*
   2          °æÈ¨ÉùÃ÷£º
   3          WIFI»úÆ÷ÈËÍø¡¤»úÆ÷ÈË´´Òâ¹¤×÷ÊÒ°æÈ¨ËùÓÐ www.wifi-robots.com
   4          Äú¿ÉÒÔÈÎÒâÐÞ¸Ä±¾³ÌÐò£¬²¢Ó¦ÓÃÓÚ×ÔÐÐÑÐ·¢µÄÖÇÄÜÐ¡³µ»úÆ÷ÈË¼°ÆäËûµç×Ó²úÆ·ÉÏ£¬µ«ÊÇ½ûÖ¹ÓÃÓÚÉÌÒµÄ²Àû¡£
   5          By WIFI»úÆ÷ÈËÍø¡¤»úÆ÷ÈË´´Òâ¹¤×÷ÊÒ
   6          */
   7          #include "motor.h"
   8          #include "timer.h"
   9          #include "mem.h"
  10          uchar Cruising_Flag =0x00;
  11          uchar  Robots_Run_Status;
  12          uchar Pre_Cruising_Flag = 0x00;
  13          
  14          /**µç»ú³õÊ¼»¯**/
  15          void Motor_Init(void)
  16          {
  17   1              MOTOR_A_EN=1;//A¶Ëµç»úÊ¹ÄÜ
  18   1              MOTOR_B_EN=1;//B¶Ëµç»úÊ¹ÄÜ
  19   1              MOTOR_GO_STOP;
  20   1      }
  21          //¸úËæÄ£Ê½
  22          /*
  23          void Follow_Track(void)
  24          {
  25                  switch(Robots_Run_Status)
  26                   {
  27                      case 0x01:MOTOR_GO_RIGHT;     break;    
  28                      case 0x02:MOTOR_GO_LEFT;     break;    
  29                      case 0x03:MOTOR_GO_FORWARD;  break;    
  30                      case 0x04:MOTOR_GO_STOP;  break;    
  31                   }
  32          
  33                  
  34                   if(Input_Detect1 == 1) //ÖÐ¼ä´«¸ÐÆ÷OK
  35                    {
  36                    
  37                      if((Input_Detect0 == 0)&& (Input_Detect2 == 0)) //Á½±ßÍ¬Ê±Ì½²âµ½ÕÏ°­Îï
  38                      {
  39                      
  40                           Robots_Run_Status=0x04;//Í£Ö¹ 
  41                      } 
  42                       
  43                      if((Input_Detect0 == 0)&& (Input_Detect2 == 1))//×ó²àÕÏ°­Îï
  44                      {
  45                      
  46                          Robots_Run_Status=0x01;//ÓÒ×ª 
  47                      }
  48                  
  49                      if((Input_Detect0 == 1)&& (Input_Detect2 == 0))//ÓÒ²àÕÏ°­Îï
  50                      {
  51                          Robots_Run_Status=0x02;//×ó×ª 
  52                      }
  53                       
  54                      if((Input_Detect0 == 1)&& (Input_Detect2 == 1))//ÎÞÈÎºÎÕÏ°­Îï
  55                      {
C51 COMPILER V9.00   MOTOR                                                                 05/25/2015 23:46:13 PAGE 2   

  56                          Robots_Run_Status=0x03;//Ö±ÐÐ 
  57                      }
  58                    }
  59                    else
  60                    {
  61                         Robots_Run_Status=0x04;//¾àÀë½üÍ£Ö¹
  62                    }
  63          
  64          }
  65          */
  66          //Ñ²ÏßÄ£Ê½
  67          void FollowLine(void)
  68          {
  69   1                      switch(Robots_Run_Status)
  70   1                       {
  71   2                              case 0x01:MOTOR_GO_RIGHT;     break;    
  72   2                              case 0x02:MOTOR_GO_LEFT;     break;        
  73   2                              case 0x03:MOTOR_GO_FORWARD;  break;        
  74   2                              case 0x04:MOTOR_GO_STOP;  break;        
  75   2                       }
  76   1      
  77   1                              if((Input_Detect_LEFT == 0)&& (Input_Detect_RIGHT == 0))//Á½±ßÍ¬Ê±Ì½²âµ½ÕÏ°­Îï
  78   1                              {
  79   2                              
  80   2                                       Robots_Run_Status=0x03;//Ö±ÐÐ 
  81   2                              } 
  82   1                               
  83   1                              if((Input_Detect_LEFT == 0)&& (Input_Detect_RIGHT == 1))//ÓÒ²àÓöµ½ÕÏ°­  
  84   1                              {
  85   2                              
  86   2                                      Robots_Run_Status=0x02;//×ó×ª 
  87   2                              }
  88   1                      
  89   1                              if((Input_Detect_LEFT == 1)&& (Input_Detect_RIGHT == 0))//×ó²àÓöµ½ÕÏ°­ 
  90   1                              {
  91   2                                      Robots_Run_Status=0x01;//ÓÒ×ª 
  92   2                              }
  93   1                               
  94   1                              if((Input_Detect_LEFT == 1)&& (Input_Detect_RIGHT == 1))//×óÓÒ¶¼¼ì²âµ½£¬¾ÍÈçÊÓÆµÖÐµÄÄÇÑùÓöµ½Ò»µÀºáµÄ½º´
             -ø 
  95   1                              {
  96   2                                      Robots_Run_Status=0x04;//Í£Ö¹ 
  97   2                              }
  98   1      }
  99          //±ÜÕÏÄ£Ê½
 100          void Avoiding(void)
 101          {
 102   1                       switch(Robots_Run_Status)
 103   1                       {
 104   2                              case 0x01:MOTOR_GO_RIGHT;     break;    
 105   2                              case 0x02:MOTOR_GO_LEFT;     break;        
 106   2                              case 0x03:MOTOR_GO_FORWARD;  break;        
 107   2                              case 0x04:MOTOR_GO_STOP;  break;
 108   2                              case 0x05:MOTOR_GO_BACK; break;            
 109   2                       }
 110   1      
 111   1                              if((Input_Detect_LEFT == 1) || (Input_Detect_RIGHT == 1) || (Input_Detect1==0))
 112   1                              {
 113   2                          
 114   2                                      Robots_Run_Status=0x04;
 115   2                              } 
 116   1                              else //·ñÔòµç»úÖ´ÐÐÇ°½ø¶¯×÷
C51 COMPILER V9.00   MOTOR                                                                 05/25/2015 23:46:13 PAGE 3   

 117   1                              {
 118   2                                        Robots_Run_Status=0x03;
 119   2                              }
 120   1      }
 121          //·¢ËÍ³¬Éù²¨
 122          void Send_wave(void)
 123          {
 124   1          uint16 i;
 125   1      
 126   1              Trig = 1;
 127   1              for(i=0;i<150;i++);
 128   1              Trig = 0;
 129   1      }
 130          //»ñµÃ¾àÀëÖµ
 131          uchar Get_Distance(void)
 132          {
 133   1          uint32 Distance = 0;
 134   1      
 135   1          Send_wave();
 136   1          TH1 = 0;
 137   1          TL1 = 0;
 138   1              while(TH1<250 && Echo!= 1);       
 139   1              if(TH1 <= 250)  //²â¾à·¶Î§<0.5M
 140   1              {
 141   2                 TH1 = 0;
 142   2                 TL1 = 0;
 143   2                 while(Echo == 1);
 144   2                 Distance = TH1;
 145   2                 Distance = Distance*256;
 146   2                 Distance = Distance + TL1;
 147   2                 Distance = Distance * 17; 
 148   2                 Distance = Distance / 22118; 
 149   2                 return (uchar)(Distance&0xFF);
 150   2              }
 151   1              return (uchar)(Distance&0xFF);
 152   1      }
 153          //Í¨¹ýÀ×´ï±ÜÕÏ
 154          void AvoidByRadar(void)
 155          {
 156   1          Send_Distance();
 157   1          if(Get_Distance()<0x0A)//Èç¹ûÀ×´ï»Ø²¨Êý¾ÝÐ¡ÓÚ10ÀåÃ×´¥·¢
 158   1          {
 159   2              MOTOR_GO_STOP;
 160   2          }
 161   1          else
 162   1          {
 163   2              MOTOR_GO_FORWARD;
 164   2          }
 165   1      
 166   1      }
 167          void Send_Distance(void)
 168          {
 169   1                 UART_send_byte(0xFF);
 170   1                 UART_send_byte(0x03);
 171   1                 UART_send_byte(0x00);
 172   1                 UART_send_byte(Get_Distance());
 173   1                 UART_send_byte(0xFF);
 174   1                 Delay_Ms(1000);   
 175   1      }
 176          //Ä£Ê½Ö´ÐÐ×Óº¯Êý£¬¸ù¾Ý±êÖ¾Î»½øÐÐÅÐ¶Ï
 177          void Cruising_Mod(void)
 178          {
C51 COMPILER V9.00   MOTOR                                                                 05/25/2015 23:46:13 PAGE 4   

 179   1             
 180   1               if(Pre_Cruising_Flag != Cruising_Flag)
 181   1               {
 182   2                   if(Pre_Cruising_Flag != 0)
 183   2                       {
 184   3                           MOTOR_GO_STOP; 
 185   3                       }
 186   2      
 187   2               Pre_Cruising_Flag =  Cruising_Flag;
 188   2               }      
 189   1      
 190   1              switch(Cruising_Flag)
 191   1              {
 192   2                 //case 0x01:Follow_Track(); break;//¸úËæÄ£Ê½
 193   2                 case 0x02:FollowLine(); break;//Ñ²ÏßÄ£Ê½
 194   2                 case 0x03:Avoiding(); break;//±ÜÕÏÄ£Ê½
 195   2                 case 0x04:AvoidByRadar();break;//³¬Éù²¨±ÚÕÏÄ£Ê½
 196   2                 default:break;
 197   2              }        
 198   1      }
 199          
 200          
 201          void Delay_ForBarrier(uint32 t)
 202          {  
 203   1          uint16 i;
 204   1              while(t--)
 205   1              {
 206   2                 for(i=0;i<1050;i++);
 207   2              }
 208   1      }
 209          
 210          //void rs_UART_send(uint8 * rs_Buffer, uint16 rs_Length)
 211          //{
 212          //    UART_send(rs_Buffer, rs_Length);
 213          //
 214          //}
 215          
 216          
 217          
 218          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    590    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
