C51 COMPILER V9.00   SOFT_UART                                                             05/25/2015 23:46:14 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE SOFT_UART
OBJECT MODULE PLACED IN Soft_uart.obj
COMPILER INVOKED BY: g:\Keil\C51\BIN\C51.EXE Source\Soft_uart.c INCDIR(..\电机控制) PRINT(.\Soft_uart.lst) OBJECT(Soft_u
                    -art.obj)

line level    source

   1          
   2          #include "Soft_uart.h"
   3          #include <stdio.h>
   4          #include <string.h>
   5          #include "motor.h"
   6          #include "timer.h"
   7          #include "steer.h"
   8          #include "IR.h"
   9          
  10          INT8U xdata Rbuf1[BufLong]; //FIFO接收区
  11          INT8U Rptr1,Rnum1;
  12          INT8U xdata Tbuf1[BufLong]; //FIFO发送区
  13          INT8U Tptr1,Tnum1;
  14          signed char TimCnt1A,TimCnt1B; 
  15          INT8U Mtbuf1,Mrbuf1,TxdCnt1,RxdCnt1;
  16          //INT8U RxdCnt2,Rnum2,Rptr2,Mrbuf2,Rbuf2[BufLong]; //如果需要两个9600 RxD，则添加这些变量。
  17          
  18          INT16U  ReceiveNextByteToRead,SendNextByteToWrite;                     //接收数据读取指针
  19          bit  Brxd1,Srxd1;               //RxD检测电平
  20          //INT16U  ReceiveNextByteToRead2,SendNextByteToWrite2;                    //如果需要两个9600 RxD，则添加这些变量。
  21          //bit  Brxd2,Srxd2;                                                                                               //如果需要两个9600 RxD，则添加这些变量。
  22          
  23          static uint8 rs_rec_flag = 0; 
  24          static uint8 xdata rs_buffer[3]; 
  25          static uint8 rs_i; 
  26          
  27          void Recv(void)
  28          {
  29   1       
  30   1        
  31   1        if(RxdCnt1>1)      //存数据位8个
  32   1       
  33   1        {
  34   2       
  35   2          Mrbuf1>>=1;
  36   2       
  37   2          if(RxD1==1) Mrbuf1=Mrbuf1|0x80;
  38   2       
  39   2        }
  40   1       
  41   1        RxdCnt1--;
  42   1       
  43   1        if(RxdCnt1==1 /*&& RxD1==1*/) //数据接收完毕，未接收停止位。   RxdCnt1==0时，接收停止位
  44   1       
  45   1        { 
  46   2              Brxd1=Srxd1=1;   //重置接收状态等待下一个起始位。
  47   2          if(Rnum1<BufLong)           //FIFO队列未满
  48   2              {
  49   3                      Rbuf1[Rptr1]=Mrbuf1; //存储到FIFO队列
  50   3                      if(++Rptr1>BufLong-1) Rptr1=0;
  51   3                      if(++Rnum1>BufLong) Rnum1=BufLong;      //FIFO队列已满，不再允许数据添加
  52   3              }
  53   2      
  54   2        }
C51 COMPILER V9.00   SOFT_UART                                                             05/25/2015 23:46:14 PAGE 2   

  55   1       
  56   1      }
  57          
  58          void Send(void)
  59          {
  60   1       
  61   1       if(TxdCnt1!=0)  //字节发送状态机
  62   1       
  63   1       {
  64   2       
  65   2        if(TxdCnt1==11) TxD1=0;//发起始位0
  66   2       
  67   2        else if(TxdCnt1>2) //发数据位
  68   2       
  69   2         { Mtbuf1>>=1; TxD1=CY;}
  70   2       
  71   2        else  TxD1=1;     //发终止位1
  72   2       
  73   2        TxdCnt1--;
  74   2       
  75   2       }
  76   1       
  77   1       else if(Tnum1>0)  //检测FIFO队列
  78   1       
  79   1       {
  80   2       
  81   2         Tnum1--;
  82   2       
  83   2         Mtbuf1=Tbuf1[Tptr1]; //读取FIFO数据
  84   2       
  85   2         if(++Tptr1>=BufLong) Tptr1=0;
  86   2       
  87   2         TxdCnt1=11;     //启动发送状态机
  88   2       
  89   2       }
  90   1       
  91   1      }
  92          
  93          /*选择性使用定时器0 （红外舵机/软串口）*/
  94          #ifdef TIMER_0
  95          void Timer_0(void) interrupt 1 using 3
  96          {
  97   1          /*调用红外与舵机*/
  98   1          if(IS_CON == 1)
  99   1          {
 100   2              Timer0_Init();
 101   2      
 102   2              if(IR_EN == 1)
 103   2              {
 104   3                  Timer_For_IR();
 105   3              }
 106   2              else
 107   2              {
 108   3                  Steering_Engine_Control();
 109   3              }
 110   2          }
 111   1          else
 112   1          {
 113   2      //      TMOD &= 0x00;
 114   2      //      AUXR &= 0X00;
 115   2      //      IP &= 0x00; //定时器0中断优先级最高
 116   2      //      TR0 = 0;
C51 COMPILER V9.00   SOFT_UART                                                             05/25/2015 23:46:14 PAGE 3   

 117   2      //      ET0 = 0;
 118   2      //      initiate_soft_uart();
 119   2          }
 120   1          
 121   1          /*调用软件串口*/
 122   1          if(RxdCnt1 == 0)  //接收起始识别
 123   1      
 124   1          {
 125   2              if(RxD1 == 0 && Brxd1 == 0 && Srxd1 == 1)     //第一个数据位间隔取4，保证读取脉冲中间
 126   2              {RxdCnt1 = 9; TimCnt1B = 0;}
 127   2              Srxd1 = Brxd1; Brxd1 = RxD1;
 128   2          }
 129   1      
 130   1      
 131   1          if(++TimCnt1B >= 3 && RxdCnt1 != 0) //数据接收，间隔为3
 132   1          {TimCnt1B = 0; Recv();}
 133   1      
 134   1          if(++TimCnt1A >= 3) //数据发送
 135   1          {TimCnt1A = 0; Send();}
 136   1      }
 137          #endif
 138          
 139          void soft_rs232_init (void)            //串口初始化  
 140          { 
 141   1        TH0=-BaudT; TL0=-BaudT; TR0=1;
 142   1       
 143   1        Rptr1=0;Rnum1=0;Tptr1=0;Tnum1=0;
 144   1        
 145   1        RxdCnt1=TxdCnt1=0;
 146   1        
 147   1              AUXR   |=   0x00;                  //Set T0x12 = 0, 12分频
 148   1          TMOD &= TMOD_AND_WORD;
 149   1          TMOD |= TMOD_TIME_MODE2;           //模式2，溢出触发中断后硬件自动将THx重装入TLx 确保定时器精度
 150   1          Brxd1=Srxd1=RxD1 = 1;                        //接收脚置成高电平  
 151   1          TxD1 = 1;                        //发射脚置成高电平  
 152   1              ReceiveNextByteToRead=SendNextByteToWrite=0;    //接收环形缓冲读取/写入指针初始化
 153   1          IP_PTx = 1;                        //置中断优先级为高  
 154   1              EA=1;                              //开启总中断
 155   1          IE_ETx = 1;                        //允许定时器中断 
 156   1              IE|=0x82; 
 157   1          TCON_ENABLE_TIMER = 1;             //启动定时器  
 158   1          
 159   1      }
 160          
 161          void initiate_soft_uart (void)               //软件串口初始化  
 162          {
 163   1          soft_rs232_init();                 //串口初始化  
 164   1      //  Timer0_Init();
 165   1          EA = 1;                            //开中断  
 166   1      }
 167          
 168          
 169          //由收转到发时，要先调用 soft_send_enable ()  
 170          void rs_send_byte(INT8U SendByte)      //发送一个字节  
 171          {
 172   1              while ( Tnum1 >= BufLong);             //等待FIFO队列有空
 173   1              Tbuf1[SendNextByteToWrite]=SendByte; 
 174   1              if(++SendNextByteToWrite>BufLong-1) SendNextByteToWrite=0;
 175   1              if(++Tnum1>BufLong) Tnum1=BufLong;      //FIFO队列已满，不再允许数据添加
 176   1      }
 177          
 178          void rs_UART_send(uint8 * Buffer)
C51 COMPILER V9.00   SOFT_UART                                                             05/25/2015 23:46:14 PAGE 4   

 179          {
 180   1          uint16 Length;
 181   1          Length = strlen(Buffer); 
 182   1          while(Length != 0)
 183   1          {
 184   2              rs_send_byte(*Buffer); 
 185   2              Buffer++;
 186   2              Length--;
 187   2          }
 188   1      }
 189          
 190          void rs_Communication_Decode(void)
 191          {
 192   1          if(rs_buffer[0] == '0') 
 193   1          {
 194   2              switch(rs_buffer[1]) 
 195   2              {
 196   3                  case '1':
 197   3                     MOTOR_GO_FORWARD;
 198   3                     //UART_send("FF000100FF", strlen("FF000100FF"));
 199   3                     return;
 200   3                  case '2':
 201   3                     MOTOR_GO_BACK;
 202   3                     //UART_send("FF000200FF", strlen("FF000200FF"));
 203   3                     return;
 204   3                  case '3':
 205   3                     MOTOR_GO_LEFT;
 206   3                     //UART_send("FF000200FF",strlen("FF000200FF"));
 207   3                     return;
 208   3                  case '4':
 209   3                     MOTOR_GO_RIGHT; 
 210   3                     return;
 211   3                  case '0':
 212   3                     MOTOR_GO_STOP; 
 213   3                     return;
 214   3                  default:
 215   3                     return;
 216   3              }
 217   2          }
 218   1          else if(rs_buffer[0] == '3')
 219   1          {
 220   2              IS_CON = 1;
 221   2          }
 222   1          else 
 223   1          {
 224   2              return;
 225   2          }
 226   1      }
 227          
 228          INT8U rs_receive_byte(void)      //接收一个字节  先调用soft_receive_enable()
 229          {
 230   1           
 231   1              INT8U outputByte=0;  
 232   1          while(Rnum1==0);                    //等待接收到一个字符
 233   1              outputByte=Rbuf1[ReceiveNextByteToRead];
 234   1      /*    
 235   1          UART_send("outputByte:", strlen("outputByte:"));  
 236   1          UART_send(&outputByte, strlen(&outputByte)); 
 237   1      */
 238   1          //51端信息解析
 239   1          if(rs_rec_flag == 0) 
 240   1          {
C51 COMPILER V9.00   SOFT_UART                                                             05/25/2015 23:46:14 PAGE 5   

 241   2              if(outputByte == 'F') 
 242   2              { 
 243   3                  rs_rec_flag = 1; 
 244   3                  rs_i = 0; 
 245   3              }
 246   2          }
 247   1          else
 248   1          {
 249   2              if(outputByte == 'F') 
 250   2              {
 251   3                  rs_rec_flag = 0; 
 252   3                  if(rs_i == 3) 
 253   3                  {
 254   4                      rs_Communication_Decode();
 255   4                      //UART_init(); //       解决串口死机问题
 256   4                  }
 257   3                  rs_i = 0; 
 258   3              }
 259   2              else
 260   2              {
 261   3                  rs_buffer[rs_i] = outputByte; 
 262   3                  rs_i++; 
 263   3              }
 264   2          }
 265   1       
 266   1          
 267   1              if( ReceiveNextByteToRead<BufLong-1)
 268   1              {
 269   2                      ReceiveNextByteToRead++;
 270   2              }else{
 271   2                      ReceiveNextByteToRead=0;
 272   2              }
 273   1              Rnum1--;                                        //读取完毕，从FIFO队列中腾出一个字符
 274   1      
 275   1              return outputByte;
 276   1      }
 277          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    630    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     67    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      2    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
